before_script:
  - docker info
variables:
  APP_VERSION: "2.2.0"
  APPS_PROJECT_BRANCH_NAME: "${CI_COMMIT_REF_NAME}"
  BUILD_NUMBER: "${CI_COMMIT_REF_NAME}-${CI_PIPELINE_ID}-${CI_COMMIT_SHORT_SHA}"
  IMAGE_TAG: "${APP_VERSION}-${CI_COMMIT_REF_NAME}"
  IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${IMAGE_TAG}"
  IMAGE_LATEST_TAG: "${CI_COMMIT_REF_NAME}-latest"
  LATEST_IMAGE_NAME: "${CI_REGISTRY_IMAGE}:${CI_COMMIT_REF_NAME}-latest"
workflow:
  rules:
  - if: $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "development" || $CI_COMMIT_BRANCH == "staging"
stages:
- build
- deploy

configuration_parameters:
  stage: build
  tags:
    - shell
    - mtbls
  script:
  - id
  - echo "CI_BUILDS_DIR $CI_BUILDS_DIR"
  - echo "CI_REGISTRY_USER $CI_REGISTRY_USER"
  - echo "CI_REGISTRY $CI_REGISTRY"
  - echo "BRANCH $CI_COMMIT_REF_NAME"
  - echo "CI_PIPELINE_ID $CI_PIPELINE_ID"
  - echo "CI_COMMIT_SHORT_SHA $CI_COMMIT_SHORT_SHA"
  - echo "CI_REGISTRY_IMAGE $CI_REGISTRY_IMAGE"
  - echo "APP_VERSION $APP_VERSION"
  - echo "IMAGE_TAG $IMAGE_TAG"
  - echo "IMAGE NAME $IMAGE_NAME"
  - echo "IMAGE NAME (with latest tag) $LATEST_IMAGE_NAME"
  - echo "APPS_ROOT_PATH $APPS_ROOT_PATH"
  - echo "DEPLOYMENTS_FOLDER $DEPLOYMENTS_FOLDER"
  - echo "APPS_PROJECT_URL $APPS_PROJECT_URL"
  - echo "APPS_PROJECT_BRANCH_NAME $APPS_PROJECT_BRANCH_NAME"

build_docker:
  stage: build
  tags:
    - shell
    - mtbls
  script:
  - docker image prune -f
  - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY" --password-stdin
  - echo "${BUILD_NUMBER}" > build_number
  - echo  "$APP_VERSION" | xargs > app_version
  - gradle build -x test
  - echo "docker build -t $IMAGE_NAME ."
  - docker build -t $IMAGE_NAME .
  - echo "docker docker build -t $LATEST_IMAGE_NAME ."
  - docker build -t $LATEST_IMAGE_NAME .
  - docker push $IMAGE_NAME
  - docker push $LATEST_IMAGE_NAME

deploy_metabolights_web:
  stage: deploy
  tags:
    - shell
    - mtbls
  variables:
    CHART_NAME: metabolights-web
  rules:
  - if: $CI_COMMIT_BRANCH == "test" || $CI_COMMIT_BRANCH == "staging" || $CI_COMMIT_BRANCH == "development" || $CI_COMMIT_BRANCH == "staging"
    when: on_success
  - if: $CI_COMMIT_BRANCH == "main"
    when: manual
    allow_failure: true
  script:
  - BUILD_PATH=$(realpath tmp)
  - echo "BUILD_PATH $BUILD_PATH"
  - mkdir -p $BUILD_PATH
  - cd $BUILD_PATH
  - APPS_ROOT_PATH="$BUILD_PATH/apps"
  - K8S_CONFIG_FILE_PATH="$APPS_ROOT_PATH/$K8S_CONFIG_FILE_PATH'
  - rm -rf $APPS_ROOT_PATH
  - echo git clone https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@${APPS_PROJECT_URL}
  - git clone https://$CI_REGISTRY_USER:$CI_REGISTRY_PASSWORD@${APPS_PROJECT_URL}
  - cd $APPS_ROOT_PATH
  - git switch $APPS_PROJECT_BRANCH_NAME
  - git status
  - git pull
  - DEPLOYMENTS_FOLDER_SCRIPTS="$APPS_ROOT_PATH/$DEPLOYMENTS_FOLDER/scripts"
  - echo "DEPLOYMENTS_FOLDER_SCRIPTS $DEPLOYMENTS_FOLDER_SCRIPTS"
  - cd $DEPLOYMENTS_FOLDER_SCRIPTS
  - cat initial_setup.sh
  - bash initial_setup.sh
  - DEPLOYMENTS_CHART_PATH="$APPS_ROOT_PATH/$DEPLOYMENTS_FOLDER/charts/$CHART_NAME"
  - echo "DEPLOYMENTS_CHART_PATH $DEPLOYMENTS_CHART_PATH"
  - cd $DEPLOYMENTS_CHART_PATH
  - cat template.sh
  - echo template.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - bash template.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - cat install.sh
  - echo install.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - bash install.sh "image.repository=$CI_REGISTRY_IMAGE,image.tag=$IMAGE_TAG"
  - rm -rf $BUILD_PATH
